name: Main

on:
  push:
    branches:
      - '**' # All branch names including slashes.
      - '!gh-pages' # Except for gh-pages.
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - '**' # All branch names including slashes.
      - '!gh-pages' # Except for gh-pages.
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab.

jobs:
  build:
    name: Build And Test
    strategy:
      max-parallel: 4
      matrix:
        os: [ubuntu-22.04, macos-13, windows-2022]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        include:
          - os: ubuntu-22.04
            activate_path: ./.venv/bin/activate
          - os: macos-13
            activate_path: ./.venv/bin/activate
          - os: windows-2022
            activate_path: ./.venv/Scripts/activate
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Set image info in env
        run: |
          echo "ImageOS=${ImageOS}" >> "$GITHUB_ENV"
          echo "ImageVersion=${ImageVersion}" >> "$GITHUB_ENV"
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # All history for all branches and tags.
          submodules: 'recursive' # All submodules.
      - name: Setup Python ${{ matrix.python-version }}
        id: setup_python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          # Optional - x64 or x86 architecture, defaults to x64.
          architecture: x64
      - name: Cache virtualenv
        id: cache_virtualenv
        uses: actions/cache@v4
        with:
          key: venv-${{ env.ImageOS }}${{ runner.arch }}-${{ env.ImageVersion }}-py${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('**/requirements-poetry.txt', '**/poetry.lock') }}
          path: .venv
      - name: Install dependencies
        if: steps.cache_virtualenv.outputs.cache-hit != 'true'
        run: |
          python -m venv .venv
          source ${{ matrix.activate_path }}
          python -m pip install --progress-bar off --upgrade --require-hashes --requirement requirements-poetry.txt
          poetry install --no-interaction
      - name: Lint And Test
        run: |
          source ${{ matrix.activate_path }}
          python -m pre_commit install -t pre-commit
          python -m pre_commit install -t pre-push
          python -m pre_commit run --all-files --show-diff-on-failure --hook-stage commit
          python -m pre_commit run --all-files --show-diff-on-failure --hook-stage push
          poetry build --no-interaction
      - name: Test Documentation
        if: contains(fromJson('["3.10", "3.11", "3.12"]'), matrix.python-version)
        run: |
          source ${{ matrix.activate_path }}
          python -m pre_commit run --all-files --show-diff-on-failure --hook-stage manual
  deploy:
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    name: Deploy Release
    runs-on: windows-2022
    permissions:
      contents: write
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # All history for all branches and tags.
          submodules: 'recursive' # All submodules.
      - name: Get Project Info
        id: project_info
        run: |
          NAME='Mapper Proxy'
          VERSION=${GITHUB_REF#refs/tags/v} # Everything after the v.
          echo "name=${NAME}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12.7"
          # Optional - x64 or x86 architecture, defaults to x64.
          architecture: x64
      - name: Install Dependencies
        run: |
          python -m venv .venv
          source ./.venv/Scripts/activate
          python -m pip install --progress-bar off --upgrade --require-hashes --requirement requirements-poetry.txt
          poetry install --no-interaction --no-root
      - name: Build Wheel And Source Archive
        id: build_dist
        run: |
          source ./.venv/Scripts/activate
          poetry build --no-interaction
          whlfiles=(dist/*.whl)
          pip install --upgrade "${whlfiles[@]}"
          pip uninstall --yes poetry poetry-core
          export PYTHONHASHSEED=1
          export SOURCE_DATE_EPOCH=$(git for-each-ref --count=1 --sort="-refname" --format="%(creatordate:unix)" refs/tags)
          python -O -m PyInstaller pyinstaller_windows.spec --clean
          unset PYTHONHASHSEED
          unset SOURCE_DATE_EPOCH
          python -m pip install --progress-bar off --upgrade --require-hashes --requirement requirements-poetry.txt
          poetry install --no-interaction
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Automatically provided by Actions.
          name: ${{ steps.project_info.outputs.name }} Version ${{ steps.project_info.outputs.version }}
          body: Auto-generated release.
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          files: |
            Mapper_Proxy_V*.zip
            Mapper_Proxy_V*.zip.sha256
      - name: Publish Documentation
        run: |
          source ./.venv/Scripts/activate
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          mkdocs gh-deploy --force

[tool.black]
	use-tabs = true
	safe = true
	line-length = 110
	target-version = ["py37", "py38"]
	exclude = '(/(\.eggs|\.git|\.mypy_cache|\.tox|\.venv|build|dist)|__pycache__)'
	include = '/((mapper|tests).*\.py|pyinstaller_windows\.spec|start\.py)$'

[tool.coverage.report]
	precision = 0
	fail_under = 40.0
	show_missing = true
	skip_covered = true
	sort = "Cover"
	exclude_lines = [
		"pragma: no cover",
		"raise AssertionError",
		"raise NotImplementedError",
		"def __repr__",
		"def __str__",
		"if __name__ == .__main__.:",
	]

[tool.coverage.run]
	source = ["mapper"]
	omit = [
		"mapper/gui/*",
	]

[tool.flake8]
	# Note that boolean values need to be inside strings. Flake8 will convert them.
	# Plugins
	use-flake8-tabs = "true"
	# Not all checks are replaced by flake8-tabs, however, pycodestyle is still not compatible with tabs.
	use-pycodestyle-indent = "false"
	continuation-style = "hanging"
	## The following are replaced by flake8-tabs plugin, reported as ET codes rather than E codes.
	# E121, E122, E123, E126, E127, E128,
	## The following (all disabled) are not replaced by flake8-tabs,
	# E124 - Requires mixing spaces and tabs: Closing bracket does not match visual indentation.
	# E125 - Does not take tabs into consideration: Continuation line with same indent as next logical line.
	# E129 - Requires mixing spaces and tabs: Visually indented line with same indent as next logical line
	# E131 - Requires mixing spaces and tabs: Continuation line unaligned for hanging indent
	# E133 - Our preference handled by ET126: Closing bracket is missing indentation
	# Reporting
	statistics = "true"
	doctests = "true"
	show-source = "true"
	# Options
	max-complexity = 15
	max-line-length = 110
	# Final bracket should match indentation of the start of the line of the opening bracket
	hang-closing = "false"
	ignore = [
		"E203",  # whitespace before ':'. Caused by Black.
		"W191",  # indentation contains tabs
		"W503",  # line break before binary operator. We want W504(line break after binary operator)
		"ET113",  # (flake8-tabs) use of alignment as indentation, but option continuation-style=hanging does not permit this.
		"ET121",  # (flake8-tabs) unexpected number of tabs at start of definition line. Caused by Black.
	]
	exclude = [
		".git",
		"__pycache__",
		".env",
		".venv",
		"env",
		"venv",
		"env.bak",
		"venv.bak",
		"ENV",
		"maps",
	]
	filename = [
		"*.py",
		"*.pys",
		"*.pyw",
		"*.spec",
	]

[tool.isort]
	line_length = 110  # The max length of an import line (used for wrapping long imports).
	# Specify what extensions isort can be ran against.
	supported_extensions = ["py", "pyi", "pys", "pyw", "pyx", "pxd", "spec"]
	extend_skip = []  # List of files to skip.
	indent = "tab"  # String to place for indents.
	multi_line_output = 3  # Vertical hanging indent for long sections of multiple imports.
	include_trailing_comma = true  # Include a trailing comma on multi line imports that include parentheses.
	force_grid_wrap = 0  # Only consider line length when forcing lines to be grid wrapped.
	use_parentheses = true  # Use parentheses for line continuation on length limit instead of slashes.
	ensure_newline_before_comments = true  # Insert a blank line before a comment following an import.
	indented_import_headings = false  # Do not include import headings inside indented imports.
	float_to_top = true  # Float all non-indented imports to the top of the file.
	lines_after_imports = 2  # Add this many lines after imports / before code begins.
	force_adds = false  # Do not force import adds if the original file is empty.
	from_first = false  # Show from imports after straight ones.
	combine_as_imports = false  # Combine as imports on the same line.
	order_by_type = true  # Order imports by type, which is determined by case, in addition to alphabetically.
	reverse_relative = true  # Reverse order of relative imports.
	add_imports = ["from __future__ import annotations"]  # Add the specified import lines to all files.
	default_section = "STDLIB"  # Set the default section for imports.
	# The heading to display for future imports.
	import_heading_future = "Future Modules:"
	# The heading to display for standard library imports.
	import_heading_stdlib = "Built-in Modules:"
	# The heading to display for third-party imports.
	import_heading_thirdparty = "Third-party Modules:"
	# Override known third-party imports.
	known_third_party = ["boltons", "certifi", "fuzzywuzzy", "jsonschema", "mudproto", "pyglet", "PyInstaller", "rapidjson", "speechlight", "tap"]
	# The heading to display for first-party imports.
	import_heading_firstparty = "Mapper Modules:"
	# Override known first-party imports.
	known_first_party = ["mapper"]
	# The heading to display for local imports.
	import_heading_localfolder = "Local Modules:"

[tool.mypy]
	files = ["mapper", "tests", "pyinstaller_windows.spec", "start.py"]
	local_partial_types = true
	strict = true
	disallow_any_unimported = true
	disallow_any_decorated = true
	warn_unreachable = true
	show_error_codes = true
	no_color_output = true

[[tool.mypy.overrides]]
	module = "tests.*"
	disallow_any_decorated = false

[build-system]
	requires = ["pdm-backend"]
	build-backend = "pdm.backend"

[project]
	name = "mapperproxy"
	authors = [
		{name = "Nick Stockton", email = "nstockton@users.noreply.github.com"},
	]
	description = "A mapper proxy for playing MUME, targeted towards the needs of blind players."
	license = {text = "MPL-2.0"}
	readme = "README.md"
	requires-python = ">=3.9,<4.0"
	dependencies = [
		"boltons>=24.0,<25.0",
		"certifi>=2025.1.31",
		"fastjsonschema>=2.21.1,<3.0",
		"knickknacks>=0.5.0,<0.6.0",
		"mud-protocols @ https://github.com/nstockton/mud-protocols/releases/download/v0.9.0/mud_protocols-0.9.0-py3-none-any.whl",
		"orjson>=3.9,<4.0",
		"pyglet>=2.0,<3.0",
		"rapidfuzz>=3.12.1,<4.0",
		"speechlight>=1.8,<2.0",
		"typed-argument-parser>=1.9,<2.0",
		"typing-extensions>=4.1,<5.0; python_version < \"3.10\"",
	]
	dynamic = ["version"]
	keywords = [
		"blind",
		"mapper",
		"mud",
		"mume",
	]
	classifiers = [
		"Intended Audience :: End Users/Desktop",
		"License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
		"Programming Language :: Python",
		"Programming Language :: Python :: 3",
		"Programming Language :: Python :: 3 :: Only",
		"Programming Language :: Python :: 3.9",
		"Programming Language :: Python :: 3.10",
		"Programming Language :: Python :: 3.11",
		"Programming Language :: Python :: 3.12",
		"Programming Language :: Python :: 3.13",
		"Programming Language :: Python :: Implementation",
		"Programming Language :: Python :: Implementation :: CPython",
		"Operating System :: MacOS",
		"Operating System :: MacOS :: MacOS X",
		"Operating System :: Microsoft",
		"Operating System :: Microsoft :: Windows",
		"Operating System :: OS Independent",
		"Operating System :: POSIX",
		"Operating System :: POSIX :: BSD",
		"Operating System :: POSIX :: Linux",
		"Operating System :: Unix",
	]

[project.urls]
	homepage = "https://github.com/nstockton/mapperproxy-mume"
	repository = "https://github.com/nstockton/mapperproxy-mume"
	documentation = "https://nstockton.github.io/mapperproxy-mume"

[project.scripts]
	mapper = "mapper.main:run"

[dependency-groups]
	dev = [
		"pre-commit>=3.5,<4.0",
		"pyinstaller==6.12.0",
		"types-boltons>=24.0,<25.0",
		"types-pyinstaller==6.12.0.20250223",
	]
	docs = [
		"jinja2==3.0.3",
		"mkdocs==1.2.3",
		"mkdocs-autorefs==0.3.1",
		"mkdocs-material==8.1.3",
		"mkdocs-material-extensions==1.0.3",
		"mkdocstrings==0.17.0",
		"pytkdocs @ git+https://github.com/nstockton/pytkdocs.git@9991d493b408c403ac5691074e2af2e509f22926",
	]
	lint = [
		"isort>=5.13,<6.0",
		"mypy>=1.14,<2.0",
		"ruff>=0.9,<1.0",
	]
	test = [
		"coverage[toml]>=7.6,<8.0",
	]

[tool.pdm.build]
	package-dir = "src"
	includes = [
		"src/mapper",
		"src/mapper_data/tiles",
		"src/mapper_data/*.py",
		"src/mapper_data/*.sample",
		"src/mapper_data/*.schema",
	]
	excludes = [
		"**/*.ignore",
		"**/*.log",
	]
	source-includes = [
		"tests",
		"uv.lock",
	]

[tool.pdm.version]
	fallback_version = "0.0.0"
	source = "scm"
	tag_filter = "[vV][0-9]*"
	tag_regex = '^(?:[vV])(?P<version>\d+\.\d+\.\d+)(?:.*)$'
	write_to = "mapper/_version.py"
	write_template = "__version__: str = \"{}\"\r\n"

[tool.uv]
	default-groups = ["dev", "docs", "lint", "test"]
	upgrade-package = ["mapperproxy"]

[tool.ruff]
	extend-include = [
		"*.pyw",
		"./pyinstaller_windows.spec",
	]
	force-exclude = true
	line-length = 110

[tool.ruff.format]
	docstring-code-format = false
	indent-style = "tab"
	line-ending = "cr-lf"

[tool.ruff.lint]
	preview = true
	# select = ["E4", "E7", "E9", "F"]  # The default.
	select = ["ALL"]  # Enable all rules.
	extend-select = [
		"D213",  # Multi-line docstring summary should start at the second line.
	]
	ignore = [
		"ANN",  # Flake8-annotations. (We use MyPy for this)
		"ARG",  # Flake8-unused-arguments.
		"B019",  # Use of functools.lru_cache or functools.cache on methods can lead to memory leaks.
		"COM812",  # Trailing comma missing. (Conflicts with formatter)
		"D",  # Pydocstyle. Fix this.
		"D105",  # Missing docstring in magic method.
		"D206",  # Docstring should be indented with spaces, not tabs.
		"D212",  # Multi-line docstring summary should start at the first line.
		"EM",  # Flake8-errmsg.
		"ERA001",  # Found commented-out code.
		"FBT",  # Flake8-boolean-trap. Fix this.
		"FIX002",  # Line contains TODO, consider resolving the issue.
		"FURB103",  # Open and write should be replaced by Path. Fix this.
		"G",  # Flake8-logging-format.
		"I",  # ISort. (We use ISort package for this)
		"N",  # pep8-naming. Fix this.
		"PLR09",  # Too many public methods, etc. Fix This.
		"PLR2004",  # Magic value used in comparison. Fix This.
		"PT",  # Flake8-pytest-style.
		"PTH",  # Flake8-use-pathlib. Fix this.
		"SLF001",  # Private member accessed. Fix this.
		"T20",  # Flake8-print.
		"TCH",  # Flake8-type-checking.
		"TD",  # Flake8-todos.
		"TRY003",  # Avoid specifying long messages outside the exception class.
		"UP007",  # Use X | Y for union type annotations. (I hate this syntax)
		"UP045",  # Use X | Y for optional type annotations. (I hate this syntax)
		"W191",  # Indentation contains tabs.
	]
	typing-modules = [
		"mapper.typedef",
		"mudproto.typedef",
		"knickknacks.typedef",
	]
	unfixable = []

[tool.ruff.lint.flake8-builtins]
	# To stop Ruff complaining when a built-in name is used as a variable name, add the name to the list.
	builtins-ignorelist = []

[tool.ruff.lint.flake8-copyright]
	author = "Nick Stockton and contributors"
	min-file-size = 1  # Minimum file size (in bytes) in which to enforce copyright.

[tool.ruff.lint.flake8-implicit-str-concat]
	allow-multiline = false

[tool.ruff.lint.mccabe]
	max-complexity = 15

[tool.ruff.lint.per-file-ignores]
	"**/__init__.py" = ["D1"]
	"**/_version.py" = ["CPY001"]
	"./tests/**" = ["D1"]
	"**/typedef.py" = ["F401"]
	"./src/mapper/gui/vec2d.py" = ["A002", "DOC", "S101", "UP031"]
	"./src/mapper/mapper.py" = ["DOC201"]

[tool.ruff.lint.pydocstyle]
	convention = "google"
	ignore-decorators = ["typing.overload"]

[tool.ruff.lint.ruff]
	# Make it a violation to use a tuple in a subscript without parentheses.
	parenthesize-tuple-in-subscript = true

[tool.coverage.report]
	precision = 0
	fail_under = 40.0
	show_missing = true
	skip_covered = true
	sort = "Cover"
	exclude_lines = [
		'\#\s*pragma: no cover',
		'^\s*raise AssertionError\b',
		'^\s*raise NotImplementedError\b',
		'^\s*def __repr__',
		'^\s*def __str__',
		'^\s*if __name__ == .__main__.:',
	]

[tool.coverage.run]
	source = ["mapper"]
	omit = [
		"src/mapper/__main__.py",
		"src/mapper/gui/*",
	]

[tool.isort]
	line_length = 110  # The max length of an import line (used for wrapping long imports).
	color_output = false
	# Specify what extensions isort can be ran against.
	supported_extensions = ["py", "pyi", "pys", "pyw", "spec"]
	extend_skip = []  # List of files to skip.
	indent = "tab"  # String to place for indents.
	atomic = true  # Ensures the output doesn't save if the resulting file contains syntax errors.
	dedup_headings = true  # Only show an identical custom import heading comment once.
	multi_line_output = 3  # Vertical hanging indent for long sections of multiple imports.
	include_trailing_comma = true  # Include a trailing comma on multi line imports that include parentheses.
	force_grid_wrap = 0  # Only consider line length when forcing lines to be grid wrapped.
	use_parentheses = true  # Use parentheses for line continuation on length limit instead of slashes.
	ensure_newline_before_comments = true  # Insert a blank line before a comment following an import.
	indented_import_headings = false  # Do not include import headings inside indented imports.
	float_to_top = true  # Float all non-indented imports to the top of the file.
	lines_after_imports = 2  # Add this many lines after imports / before code begins.
	force_adds = false  # Do not force import adds if the original file is empty.
	from_first = false  # Show from imports after straight ones.
	combine_as_imports = false  # Combine as imports on the same line.
	order_by_type = true  # Order imports by type, which is determined by case, in addition to alphabetically.
	reverse_relative = true  # Reverse order of relative imports.
	add_imports = ["from __future__ import annotations"]  # Add the specified import lines to all files.
	default_section = "STDLIB"  # Set the default section for imports.
	# The heading to display for future imports.
	import_heading_future = "Future Modules:"
	# The heading to display for standard library imports.
	import_heading_stdlib = "Built-in Modules:"
	# The heading to display for third-party imports.
	import_heading_thirdparty = "Third-party Modules:"
	# Override known third-party imports.
	known_third_party = [
		"boltons",
		"certifi",
		"fastjsonschema",
		"knickknacks",
		"mudproto",
		"orjson",
		"pyglet",
		"PyInstaller",
		"rapidfuzz",
		"speechlight",
		"tap",
		"typing_extensions",
	]
	# The heading to display for first-party imports.
	import_heading_firstparty = "Mapper Modules:"
	# Override known first-party imports.
	known_first_party = ["mapper"]
	# The heading to display for local imports.
	import_heading_localfolder = "Local Modules:"

[tool.mypy]
	files = ["src/mapper", "tests", "pyinstaller_windows.spec"]
	exclude = '^$'
	local_partial_types = true
	strict = true
	disallow_any_unimported = true
	disallow_any_decorated = true
	warn_unreachable = true
	show_error_codes = true
	no_color_output = true

[[tool.mypy.overrides]]
	module = "tests.*"
	disallow_any_decorated = false

[[tool.mypy.overrides]]
	module = [
		"fastjsonschema.*",
		"PyInstaller.config",
	]
	ignore_missing_imports = true
